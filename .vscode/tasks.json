// Copyright (c) 2023 Sebastian Peralta
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "detail": "Build workspace (default)",
            "type": "shell",
            "command": "cd ${input:package} && bash build.sh",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "debug",
            "detail": "Build workspace (debug)",
            "type": "shell",
            "command": "cd ${input:package} && bash build.sh",
            "options": {
                "env": {
                    "BUILD_TYPE": "Debug"
                }
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "install",
            "detail": "Install package",
            "type": "shell",
            "command": "cd ${input:package} && bash install.sh",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": "$gcc"
        },
        {
            "label": "test",
            "detail": "Run all unit tests and show results.",
            "type": "shell",
            "command": "cd ${input:package} && sh build.sh && sh test.sh",
            "group": {
                "kind": "test",
                "isDefault": true
            }
        },
        {
            "label": "cclean",
            "detail": "Run the clean target",
            "type": "shell",
            "command": "colcon build --cmake-target clean",
            "problemMatcher": "$gcc"
        },
        {
            "label": "clean",
            "detail": "Remove build and install directories",
            "type": "shell",
            "command": "cd ${input:package} && rm -rf build && rm -rf /usr/local/include/${input:package}",
            "problemMatcher": "$gcc"
        },
        {
            "type": "shell",
            "label": "Update VS Code Python Path",
            "command": "python3 -m site --user-site",
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build"
        },
        {
            "label": "fix",
            "detail": "Reformat files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify --reformat ${input:package}/src/",
            "problemMatcher": []
        },
        {
            "label": "uncrustify",
            "detail": "Lint files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify ${input:package}/src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "uncrustify",
                    "source": "uncrustify",
                    "fileLocation": "relative",
                    "pattern": [
                        {
                            "regexp": "^(.*)'(.*)':",
                            "kind": "file",
                            "file": 2,
                            "message": 1
                        }
                    ]
                }
            ]
        },
        {
            "label": "cpplint",
            "detail": "Lint files with cpplint.",
            "type": "ament",
            "task": "cpplint",
            "path": "${file}",
            "problemMatcher": "$ament_cpplint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "cppcheck",
            "detail": "Run static code checker cppcheck.",
            "type": "ament",
            "task": "cppcheck",
            "path": "${input:package}/src/",
            "problemMatcher": "$ament_cppcheck",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "options": {
                "env": {
                    "AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS": "1"
                }
            }
        },
        {
            "label": "lint_cmake",
            "detail": "Run lint on cmake files.",
            "type": "ament",
            "task": "lint_cmake",
            "path": "${input:package}/src/",
            "problemMatcher": "$ament_lint_cmake",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "flake8",
            "detail": "Run flake8 on python files.",
            "type": "ament",
            "task": "flake8",
            "path": "${input:package}/src/",
            "problemMatcher": "$ament_flake8",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "pep257",
            "detail": "Run pep257 on python files.",
            "type": "ament",
            "task": "pep257",
            "path": "${input:package}/src/",
            "problemMatcher": "$ament_pep257",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "xmllint",
            "detail": "Run xmllint on xml files.",
            "type": "ament",
            "task": "xmllint",
            "path": "${input:package}/src/",
            "problemMatcher": "$ament_xmllint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "lint all",
            "detail": "Run all linters.",
            "dependsOn": [
                "cppcheck",
                "cpplint",
                "flake8",
                "lint_cmake",
                "pep257",
                "xmllint",
                "uncrustify"
            ],
            "problemMatcher": []
        },
        {
            "label": "new ament_cmake package",
            "detail": "Create a new ROS cpp package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory ${input:package}/src --build-type ament_cmake ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "new ament_python package",
            "detail": "Create a new ROS python package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory ${input:package}/src --build-type ament_python ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "import from workspace file",
            "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
            "type": "shell",
            "command": "vcs import < ${input:package}/src/ros2.repos ${input:package}/src",
            "problemMatcher": []
        },
        {
            "label": "update workspace file",
            "detail": "Use vcs to update repositories in ${input:package}/src to workspace file.",
            "type": "shell",
            "command": "vcs export ${input:package}/src > ${input:package}/src/ros2.repos",
            "problemMatcher": []
        },
        {
            "label": "install dependencies",
            "detail": "Install all dependencies specified in the workspaces package.xml files.",
            "type": "shell",
            "command": "sudo apt-get update && rosdep update && rosdep install --from-paths ${input:package}/src --ignore-src -y",
            "problemMatcher": []
        },
        {
            "type": "ament",
            "task": "cpplint",
            "path": "${file}",
            "commandOptions": "",
            "problemMatcher": [
                "$ament_cpplint"
            ],
            "label": "ament: cpplint"
        },
        {
            "type": "colcon",
            "args": [
                "build",
                "--symlink-install",
                "--event-handlers",
                "console_cohesion+",
                "--base-paths",
                "${input:package}",
                "--cmake-args",
                "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
            ],
            "problemMatcher": [
                "$catkin-gcc"
            ],
            "group": "build",
            "label": "colcon: build",
            // "options": {
            //     "cwd": ".."
            // }
        },
        {
            "type": "colcon",
            "args": [
                "build",
                "--symlink-install",
                "--event-handlers",
                "console_cohesion+",
                "--base-paths",
                "${input:package}",
                "--build-base",
                "..",
                "--install-base",
                "..",
                // "--cmake-args",
                // "-DCMAKE_BUILD_TYPE=RelWithDebInfo"
            ],
            "problemMatcher": [
                "$catkin-gcc"
            ],
            "group": "build",
            "label": "colcon: build",
        }
    ],
    "inputs": [
        {
            "id": "package",
            "type": "pickString",
            "description": "Package name",
            "default": "${fileDirname}",
            "options": ["${fileDirname}","${file}", "${fileDirname}/..", "${fileDirname}../.."]
            // "options": [${workspaceFolders.map(folder => `"${folder.name}"`).join(', ')}]

        }
    ]
}